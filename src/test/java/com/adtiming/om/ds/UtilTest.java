package com.adtiming.om.ds;import com.adtiming.om.ds.dao.OmSupportDeviceMapper;import com.adtiming.om.ds.model.OmSupportDevice;import org.junit.Test;import org.springframework.http.MediaType;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.result.MockMvcResultMatchers;import javax.annotation.Resource;import java.io.BufferedReader;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStreamReader;import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;/** * Created by ruandianbo on 20-2-12. */public class UtilTest extends BaseCommonTests {    @Resource    OmSupportDeviceMapper omSupportDeviceMapper;    @Test    public void addDevices(){        try (BufferedReader in = new BufferedReader(new InputStreamReader(                new FileInputStream("/data/device_list.csv")))) {            String line = null;            while ((line = in.readLine()) != null) {                try {                    String[] deviceInfo = line.split("\t");                    OmSupportDevice omSupportDevice = new OmSupportDevice();                    omSupportDevice.setBrand(deviceInfo[0].trim());                    omSupportDevice.setMarketName(deviceInfo[1].trim());                    omSupportDevice.setDevice(deviceInfo[2].trim());                    omSupportDevice.setModel(deviceInfo[3].trim());                    omSupportDeviceMapper.insertSelective(omSupportDevice);                }catch (Exception e){                    log.error("Add device {} error:", line, e);                }            }        } catch (IOException e) {            log.error("addDevices_error:", e);        }    }    @Test    public void testGetCountries() throws Exception {        mockMvc.perform(MockMvcRequestBuilders.get("/util/country/list").param("pubAppId", "100"))                .andDo(print())                .andExpect(status().isOk())                .andExpect(MockMvcResultMatchers.content().contentType(MediaType.APPLICATION_JSON_UTF8));    }    @Test    public void testGetDevices() throws Exception {        mockMvc.perform(MockMvcRequestBuilders.get("/util/device/list")                .param("brand", "Starlight").param("model", "C_Note"))                .andDo(print())                .andExpect(status().isOk())                .andExpect(MockMvcResultMatchers.content().contentType(MediaType.APPLICATION_JSON_UTF8));    }    @Test    public void testGetMessageDicts() throws Exception {        mockMvc.perform(MockMvcRequestBuilders.get("/msg/dict"))                .andDo(print())                .andExpect(status().isOk())                .andExpect(MockMvcResultMatchers.content().contentType(MediaType.APPLICATION_JSON_UTF8));    }}